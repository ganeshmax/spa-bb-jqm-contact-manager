TODO:
====
Add a proper REGION for app developers to display page instead of the current App.body.showPage(). I think it should be something like
VMobile.showPage() or something like that.

Add a theme changer to the settings page.

Remove Marionette.application. There seems to be over reliance on marionette. Replace with normal namespaces.

perform a setElement on every Marionette views so that the templates can be full HTML instead of only content of the root.

Since I added data-id to the header to stop it from participating in the transition, If there are elements between pages which appear to have some transition effects during page transition,
add a data-transition=none to them so that they don't happen. Verify this behaviour by adding header elements before coding in the data-transition.

Make the mixins as interfaces and have class implementations for them. When a user adds the mixins to PageView, they can add the new'ed version.
This is currently a problem because the scrollable object may hold state that could conflict while the same object is being mixed into multiple pages.
(currently only one page exists at a time, but this design is not flexible/scalable). Test this problem using multiple instances of PageView before committing to a solution.

Added IScrollBasedPageScroller class to represent a class that can be instantiated and added as a mixin instead of directly having mixin objects.
This way mixins can be configured before mixing them with target object. This is just an experiment right now. Decide how to proceed and keep it or remove it depending on the decision.

MULTI APP CONTAINER:
--------------------
Marionette Application can be used to build a container app that holds multiple sub-applications.
The container app will show a dashboard of client applications. When one sub-application is selected, we can start() it.
When the user comes out of that sub-application, we can stop() it (or not).
sub-applications can be made to communicate between each other using events. That way they are not directly coupled.
Each sub-application should also be structured as a separate application so that they can be run isolated. Since events are used to communicate between sub-apps, they will not break.
Each sub-application or the whole container application can also be run as mobile web app (if required).
Updates can be made using bootstrap component for individual or the whole application.
We may also allow for the sub-applications to be built using different technologies, but disabling a few features like inter app communication.

DONE:
====
NR: data-transition: Pickup data-transition from the clicked link and from the incoming page and choose link version if there is a conflict.
Bottom tabs links are not active. Make them active after transition.
    added ui-btn-active to the links in navbar in all page templates. There is also only more called ui-data-persist, that some recommend, but that
    is only when working within the scope of jqm framework and the page remains in the DOM. We don't have to care about that.

Added Themes: Flat-UI Theme, ios-inspired and multiple graphite themes to the app.

Link save and cancel buttons in contact entry page. added view and edit mode and made buttons appear and dissapear as appropriate.

Change the name of Vmobile to Z and organize and rename other classes to make it uniform.

Fix the autolinkhighlight for listview links until it loads the next page. Take inspiration from jqm source

Do collection fetch and reset in correct order in the render method to make it work as expected.

Still the listview has some problems during the first load. It shows up unstyled list during the page load (rarely). I think it is because, we are not completing rendering before
calling $.mobile.changePage() during the initial page load. FIX IT. FIXED by showing the new view after the initial collection is loaded using jqXhr.done().

Added data-id to the header as well to make the header persistent. It started working from jqm 1.1 onwards.

Tap instead of Click:
Used "tap" event (vclick is another option) instead of the regular click events so that the 300 ms delay that browsers introduce to handle double click is minimzed.
Before doing this, the click event was noticeably slow to respond. But that added its own set of complexities because, now there was a ghost click.
Check out https://developers.google.com/mobile/articles/fast_buttons. The solution was to event.preventDefault() on tap.

setTimeout() during changePage():
Earlier, some rendering issues arose when changePage() was executed. So, i used a setTimeout(0) to give the browser a tick before changePage occurs. In MarionetteExt.
But, that introduced noticeable flicker in the UI transition. Now, i have removed the setTimeout() and do not notice rendering issues, and the flicker is gone.
This is something to keep in mind while developing jQuery mobile apps. I think, earlier, i could have done some mistake that was shadowed by setTimeout(). But now,
i probably must have fixed the bugs and the setTimeout() is not necessary. Only time will tell.

div[data-role=content]>div.content:
Added a standard div.content to the div[data-role=content] for a few reasons.
1. We may show different things inside the content section during the lifecycle of the page. We may not want some existing elements to be disturbed during this process.
The existing elements can be achieved by having them in the header or footer. But, what if we don't want to. That is the reason why there is another layer of div.
2. iScroll works with a wrapper and a scroller. In this case, div[data-role=content] can be used as a wrapper and div.content can be used as a scroller.
Since this becomes the standard it makes more sense to have the additional element.
3. Since jqm by default doesn't use overflow:scroll for any elements, the div[data-role=content] is not restricted between the header and the footer.
That is, its height is not total - (header + footer). Instead its height is TOTAL, but it adds a padding to the top and bottom of the content to make it seem like it is in between
the header and footer. In JQM, the full page scrolls, not just the content. They only employ position:fixed and not the overflow:scroll and for good reasons, mostly support.
But, this means that the scrollbar will go through the top of the page into the header, which is not a problem. But it could not be the case if we used dov.content to be the scroller.
This doesn't have the padding and it appears after the padding as well. That means, this could potentially represent true mid scrolling.
 WILL HAVE TO TEST THAT THOUGH.

Removed iscrollview. Currently focussing on getting the jquery mobile normal scroll working because that sounds to be the best option.
This is because the whole page is actually getting scrolled using the default/native browser scroll for whole page. That is because, they
use only position:fixed for the headers and footers and no overflow:scroll concept, as it is not required only in a header and footer fixed
scenario. This makes for good scrolling effect. We don't need iscroll unless you want to scroll parts of the content individually
which may not be required in many usecases.

autoScrollable Mixin:
The primary purpose of this mixin is to enable scroller functionality for jquery mobile pages (specifically the content part).
It is not used for all scrolling purposes (for example) scrolling of some deep div inside a page or other features.
The Mixin is an interface (offering required methods) that can be implemented using any technology. The default one used is implemented using iscroll.
The default one used data-iscroll="enabled" in a page markup to determine if scrolling is enabled and considers data-role=content as the default scroll wrapper.
Later, the default mixin changed and no more needs data-iscroll=enabled in the page markup. Only the isScrollerEnabled() method needs to be implemented and return a boolean as appropriate.
The isScrollerEnabled() may choose to use the page markup or attributes to determine if scrolling is enabled, or may determine that the scroller is enabled by the mere presence of the mixin.
Other mixins may implement using different scroller libraries and different ways to represent if a page is scroll enabled or not and which content to scroll (wrapper/scroller) etc.

During addition of iscroll mixin, i wasn't able to get it working. The scrollbar that iscroll generated was extended beyond the content container, although the content
container was properly sized and the div hierarchy was properly laid out compared to the iscroll documentation. The problem was that the content div was not position:relative.
For some reason iscroll expects the content div to be position:relative. And that is exactly what i did in autoScrollable mixin to make that happen.

Change all div[data-role=content] style to jqmData style

Test iscroll on div.content, if it does mid-scroll only. That will prove the necessity of div.content inside div[data-role=content].

Add content-wrapper and content-scroller classes to incorporate iscroll or iscrollview in the future.

JQM $.mobile.loading('show') was not displaying anything in various combinations. Then finally it worked after configuring its prototype with default values in mobileinit event.


Adding Cordova:
1. cordova create - in the parent folder of the project folder. This will create directories like .cordova, merges, www, platforms, plugins etc
2. move "client" folder to "www" folder generated by cordova because that is what cordova understands as client folder
   Remove js, css, html files generated by cordova from www
   Rename app to src, res to resource, img to image and put them all inside the src folder
   Modify Gruntfile.js and change the path. Verify index.html and verify path
   Verified grunt build and checked if Templates.js was generated at the right location and ran node app. Checked localhost:8000
3. Modified Main.js to accomodate both deviceready and document.ready. No problem with missing cordova.js in web version. just a 404 for that request
   cordova platform add ios. Somehow it understood the launch and icon images even though i renamed the res to resource.
   Running without localhost problem solved.
